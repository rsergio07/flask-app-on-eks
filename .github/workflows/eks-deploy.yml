name: Deploy to EKS

on:
  push:
    branches:
      - aws-projects
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2
      with:
        ref: aws-projects

    - name: Install AWS CLI
      run: |
        sudo apt-get update
        sudo apt-get install -y awscli

    - name: Configure AWS Credentials
      run: |
        aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws configure set region ${{ secrets.AWS_REGION }}

    - name: Create or Get IAM role for EKS (using check)
      id: eks-service-role
      run: |
        role_arn=$(aws iam get-role --role-name eks-service-role --query 'Role.Arn' --output text 2>/dev/null || echo "")
        if [ -z "$role_arn" ]; then
          aws iam create-role \
            --role-name eks-service-role \
            --assume-role-policy-document '{
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": "eks.amazonaws.com"
                  },
                  "Action": "sts:AssumeRole"
                }
              ]
            }'
        fi
        echo "::set-output name=role_arn::$role_arn"

    - name: Attach IAM policy to EKS role
      run: |
        aws iam attach-role-policy \
          --role-name ${{ steps.eks-service-role.outputs.role_arn }} \
          --policy-arn arn:aws:iam::aws:policy/AmazonEKSClusterPolicy

      - name: Create VPC for EKS
        id: create-vpc
        run: |
          vpc_id=$(aws ec2 create-vpc --cidr-block 10.0.0.0/16 --query 'Vpc.{VpcId:VpcId}' --output text)
          aws ec2 create-tags --resources $vpc_id --tags Key=Name,Value=vpc-for-eks
          echo "::set-output name=vpc-id::$vpc_id"

      - name: Create subnets for EKS
        id: create-subnets
        run: |
          subnet_01_id=$(aws ec2 create-subnet --vpc-id ${{ steps.create-vpc.outputs.vpc-id }} --cidr-block 10.0.1.0/24 --query 'Subnet.{SubnetId:SubnetId}' --output text)
          aws ec2 create-tags --resources $subnet_01_id --tags Key=Name,Value=subnet-01-for-eks
          echo "::set-output name=subnet-01-id::$subnet_01_id"

          subnet_02_id=$(aws ec2 create-subnet --vpc-id ${{ steps.create-vpc.outputs.vpc-id }} --cidr-block 10.0.2.0/24 --query 'Subnet.{SubnetId:SubnetId}' --output text)
          aws ec2 create-tags --resources $subnet_02_id --tags Key=Name,Value=subnet-02-for-eks
          echo "::set-output name=subnet-02-id::$subnet_02_id"

      - name: Create security group for EKS
        id: create-security-group
        run: |
          security_group_id=$(aws ec2 create-security-group --group-name sg-for-eks --description "Security group for EKS" --vpc-id ${{ steps.create-vpc.outputs.vpc-id }} --query 'GroupId' --output text)
          aws ec2 create-tags --resources $security_group_id --tags Key=Name,Value=sg-for-eks
          echo "::set-output name=security-group-id::$security_group_id"

      - name: Authorize inbound and outbound traffic for security group
        run: |
          aws ec2 authorize-security-group-ingress --group-id ${{ steps.create-security-group.outputs.security-group-id }} --protocol -1 --cidr 0.0.0.0/0
          aws ec2 authorize-security-group-egress --group-id ${{ steps.create-security-group.outputs.security-group-id }} --protocol -1 --cidr 0.0.0.0/0

      - name: Create EKS cluster
        run: |
          aws eks create-cluster \
            --name my-eks-cluster \
            --role-arn arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/eks-service-role \
            --resources-vpc-config subnetIds=${{ steps.create-subnets.outputs.subnet-01-id }},${{ steps.create-subnets.outputs.subnet-02-id }},securityGroupIds=${{ steps.create-security-group.outputs.security-group-id }}

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name my-eks-cluster

      - name: Build Docker image
        run: docker build -t my-ecr-repo/my-rest-api:latest .

      - name: Authenticate Docker to ECR
        run: aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com

      - name: Push Docker image to ECR
        run: docker push my-ecr-repo/my-rest-api:latest

      - name: Deploy REST API app to EKS
        run: |
          set -e
          kubectl apply -f deployment.yml
          kubectl apply -f service.yaml
